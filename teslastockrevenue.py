# -*- coding: utf-8 -*-
"""Teslastockrevenue.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ub7_5L6YlgZMatHMxf-Iyv58iFIUufU7

Tesla and Gamestop Stock and Revenue Dashboard - 9/2/2025
"""

!pip install yfinance
!pip install bs4
!pip install nbformat
!pip install --upgrade plotly

import yfinance as yf
import pandas as pd
import requests
from bs4 import BeautifulSoup
import plotly.graph_objects as go
from plotly.subplots import make_subplots

import plotly.io as pio
pio.renderers.default = "iframe"

import warnings
# Ignore all warnings
warnings.filterwarnings("ignore", category=FutureWarning)

def make_graph(stock_data, revenue_data, stock):
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=("Historical Share Price", "Historical Revenue"), vertical_spacing = .3)
    stock_data_specific = stock_data[stock_data.Date <= '2021-06-14']
    revenue_data_specific = revenue_data[revenue_data.Date <= '2021-04-30']
    fig.add_trace(go.Scatter(x=pd.to_datetime(stock_data_specific.Date, infer_datetime_format=True), y=stock_data_specific.Close.astype("float"), name="Share Price"), row=1, col=1)
    fig.add_trace(go.Scatter(x=pd.to_datetime(revenue_data_specific.Date, infer_datetime_format=True), y=revenue_data_specific.Revenue.astype("float"), name="Revenue"), row=2, col=1)
    fig.update_xaxes(title_text="Date", row=1, col=1)
    fig.update_xaxes(title_text="Date", row=2, col=1)
    fig.update_yaxes(title_text="Price ($US)", row=1, col=1)
    fig.update_yaxes(title_text="Revenue ($US Millions)", row=2, col=1)
    fig.update_layout(showlegend=False,
                      height=900,
                      title=stock,
                      xaxis=dict(rangeslider=dict(visible=True)),
                      xaxis2=dict(rangeslider=dict(visible=True))
                     )
    fig.show()
    from IPython.display import display, HTML
    fig_html = fig.to_html()
    display(HTML(fig_html))

"""Use yfinance to Extract Stock Data

"""

#Using the Ticker function enter the ticker symbol of the stock we want to extract data on to create a ticker object. The stock is Tesla and its ticker symbol is TSLA.
tsla_ticker = yf.Ticker('TSLA')
tesla_hist = tsla_ticker.history(period="max")
tesla_data = pd.DataFrame(tesla_hist)

tesla_data.reset_index(inplace=True)

"""Use Webscraping to Extract Tesla Revenue Data"""

url ='https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm'
html_data = requests.get(url).text

soup = BeautifulSoup(html_data,'html.parser')

tesla_revenue = pd.DataFrame(columns=["Date","Revenue"])
for row in soup.find_all("tbody")[1].find_all("tr"):
    col = row.find_all("td")
    Date = col[0]
    Revenue = col[1]

    tesla_revenue = pd.concat([tesla_revenue,pd.DataFrame({"Date":[Date],"Revenue":[Revenue]})],ignore_index = True)
    tesla_revenue['Revenue'] = tesla_revenue['Revenue'].astype(str)

tesla_revenue['Revenue']=tesla_revenue['Revenue'].str.replace(r"\$","",regex=True)
tesla_revenue['Revenue']=tesla_revenue['Revenue'].str.replace(r"[^0-9]","",regex=True)


tesla_revenue.dropna(inplace=True)
tesla_revenue = tesla_revenue[tesla_revenue['Revenue'] != ""]


tesla_revenue['Date'] = tesla_revenue['Date'].apply(lambda x: x.text)
tesla_revenue['Date'] = pd.to_datetime(tesla_revenue['Date'])

"""Use yfinance to Extract Stock Data

"""

gme_ticker= yf.Ticker('GME')

gme_hist = gme_ticker.history(period="max")
gme_data = pd.DataFrame(gme_hist)

gme_data.reset_index(inplace=True)

"""Use Webscraping to Extract GME Revenue Data"""

url = 'https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html'
html_data_2 = requests.get(url).text

soup2 = BeautifulSoup(html_data_2,'html.parser')

gme_revenue = pd.DataFrame(columns=["Date","Revenue"])
for row in soup2.find_all("tbody")[1].find_all("tr"):
    col = row.find_all("td")
    Date = col[0]
    Revenue = col[1]
    gme_revenue = pd.concat([gme_revenue,pd.DataFrame({"Date":[Date],"Revenue":[Revenue]})],ignore_index = True)
    gme_revenue['Revenue']=gme_revenue['Revenue'].astype(str)
    gme_revenue['Revenue']=gme_revenue['Revenue'].str.replace(r",|\$","",regex=True)
    gme_revenue['Revenue']=gme_revenue['Revenue'].str.replace(r"[^0-9]","",regex=True)

gme_revenue['Date'] = gme_revenue['Date'].apply(lambda x: x.text)
gme_revenue['Date']=pd.to_datetime(gme_revenue['Date'])


make_graph(tesla_data,tesla_revenue,'Tesla')

make_graph(gme_data,gme_revenue,'Gamestop')

